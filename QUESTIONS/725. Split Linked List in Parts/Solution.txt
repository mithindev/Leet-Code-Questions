#725. Split Linked List in Parts


/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode[] splitListToParts(ListNode head, int k) {
        ListNode[] ans = new ListNode[k];

        if (head == null) {
            return ans;
        }

        ListNode cur = head;
        int l = len(head);

        int split = l/k;
        int rem = l % k;

        for (int i = 0; i < k; i++) {
            ListNode dummy = new ListNode(0);
            ListNode temp = dummy;

            for (int j = 0; j < split + (i < rem ? 1 : 0); j++) {
                temp.next = new ListNode(cur.val);
                temp = temp.next;
                cur = cur.next;
            }

            ans[i] = dummy.next;

        }
        
        return ans;
    }

    public int len (ListNode head) {
        ListNode temp = head;

        int count = 0;

        while (temp != null) {
            count++;
            temp = temp.next;
        }

        return count;
    }
}