class Solution:
    def isOperlaping(self, arr1, arr2):
        arr1 = [i for i in range(arr1[0], arr1[1] + 1)]
        arr2 = [i for i in range(arr2[0], arr2[1] + 1)]
        return len(set(arr1).intersection(set(arr2)))
            
    def helper (self, arr1, arr2):
        # arr1 = [i for i in range(arr1[0], arr1[1] + 1)]
        # arr2 = [i for i in range(arr2[0], arr2[1] + 1)]
        # return [arr1[0], arr2[-1]]

        if arr2[1] < arr1[1]:
            return [arr1[0], arr1[1]]
        else:
            return [arr1[0], arr2[-1]]

    def merge(self, intervals: List[List[int]]) -> List[List[int]]:
        intervals.sort(key=lambda x: x[0])
        ans = [intervals[0]]

        for i in range(1, len(intervals)):
            if self.isOperlaping(ans[-1], intervals[i]):
                ans[-1] = self.helper(ans[-1], intervals[i])
            else:
                ans.append(intervals[i])
        
        return ans

        