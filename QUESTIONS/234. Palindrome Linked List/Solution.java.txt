/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    static boolean isPalindrome(ListNode head) {
        int l = length (head);

        if (head == null || head.next == null) {
            return true;
        }
        if (head.next.next == null) {
            return head.val == head.next.val;
        }

        ListNode slow = head;
        

        for (int i = 0; i < l/2; i++) {
            slow = slow.next;
        }

        ListNode node = reverse(slow);

        while(node != null) {
            if (head.val != node.val) {
                return false;
            }
            head = head.next;
            node = node.next;
        }
        return true;
    }

    static int length (ListNode head) {
        ListNode temp = head;

        int count = 0;

        while (temp != null) {
            count++;
            temp = temp.next;
        }

        return count;
    }

    static ListNode reverse (ListNode head) {
        ListNode current = head;
        ListNode prev = null;
        ListNode nxt;

        while (current != null) {
            nxt = current.next;
            current.next = prev;
            prev = current;
            current = nxt;
        }
        return prev;
    }
}