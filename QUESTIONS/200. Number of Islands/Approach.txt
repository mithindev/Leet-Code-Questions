200. Number of Islands

class Solution:
    def dfs(self, grid, r, c, visited, row, col):
        if r < 0 or r >= row or c < 0 or c >= col or visited[r][c] == True or grid[r][c] != '1':
            return

        grid[r][c] = '0'

        self.dfs(grid, r - 1, c, visited, row, col)
        self.dfs(grid, r + 1, c, visited, row, col)
        self.dfs(grid, r, c - 1, visited, row, col)
        self.dfs(grid, r, c + 1, visited, row, col)
        

    def numIslands(self, grid: List[List[str]]) -> int:
        if not grid or not grid[0]:
            return 0
            
        ans = 0
        row = len(grid)
        col = len(grid[0])
        visited = [[False] * col for _ in range(row)]

        for r in range(row):
            for c in range(col):
                if grid[r][c] == '1':
                    ans += 1
                    self.dfs(grid, r, c, visited, row, col)
        
        return ans

"""
BRUTE FORCE APPROACH:-

class Solution:
    def findOne (self, grid, row, col):
        r = c = -1
        for i in range(row):
            for j in range(col):
                if grid[i][j] == '1':
                    r = i
                    c = j
                    return [r, c]
        return [r, c]


    def dfs(self, grid, r, c, visited, row, col):
        if 0 <= r < row and 0 <= c < col and visited[r][c] == False and grid[r][c] == '1' :
            visited[r][c] = True
            grid[r][c] = '0'

            self.dfs(grid, r - 1, c, visited, row, col)
            self.dfs(grid, r + 1, c, visited, row, col)
            self.dfs(grid, r, c - 1, visited, row, col)
            self.dfs(grid, r, c + 1, visited, row, col)

    def numIslands(self, grid: List[List[str]]) -> int:
        if not grid or not grid[0]:
            return 0
            
        ans = 0
        row = len(grid)
        col = len(grid[0])

        visited = [[False] * col for _ in range(row)]

        while (True):
            pos = self.findOne(grid, row, col)
            r = pos[0]
            c = pos[1]

            if r == -1 or c == -1:
                return ans
            
            ans += 1

            self.dfs(grid, r, c, visited, row, col)
"""