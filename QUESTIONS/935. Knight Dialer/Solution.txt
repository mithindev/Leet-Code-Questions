935. Knight Dialer

class Solution:
    def helper(self, possibility, n, dp, cell):
        if n == 0:
            return 1
        
        if dp[n][cell] != -1:
            return dp[n][cell]
        
        ans = 0

        for i in possibility[cell]:
            ans += self.helper(possibility, n - 1, dp, i) % (10**9 + 7)

        dp[n][cell] = ans
        return ans

    def knightDialer(self, n: int) -> int:
        possibility = [
            [4, 6],
            [6, 8],
            [7, 9],
            [4, 8],
            [3, 9, 0],
            [],
            [1, 7, 0],
            [2, 6],
            [1, 3],
            [2, 4]
        ]

        dp = [[-1 for r in range(10)] for c in range(n + 1)]
        
        ans = 0
        for i in range(10):
            ans = (ans + self.helper(possibility, n - 1, dp, i)) % (10**9 + 7)
        
        return ans




"""
TRY - 1

class Solution:
    def  helper(self, index, n):
        poritions = []

        for i in index:
            positions.extend(self.posiblePositions(i))
        n -= 1
        if n == 0:
            return len(positions)


    def posiblePositions(self, index):      
        positions = [[2, 1], [2, -1], [1, 2], [1, -2], [-1, -2], [-1, 2], [-2, 1], [-2, -1]]
        ans = []

        for position in positions:
            new_x = index[0] + position[0]
            new_y = index[1] + position[1]

            if (new_x < 2 and new_y < 2 and new_x > 0 and new_y > 0) or (new_x == 2 and new_y == 1):
                ans.append(new_x, new_y)
        
        return ans

    def knightDialer(self, n: int) -> int:
        dialPad = [
            [1, 2, 3],
            [4, 5, 6],
            [7, 8, 9],
            ["", 0, ""]
        ]
        
"""